<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>Admin - Products</title>

    <link rel="stylesheet" href="/styles/admin/adminnavbar.css">
    <link rel="stylesheet" href="/styles/admin/adminsidebar.css">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css" />
    <script src="https://cdn.jsdelivr.net/npm/axios/dist/axios.min.js"></script>

    <style>
        /* Base Admin Layout - Consistent with addProduct */
        .admin-wrapper {
            display: flex;
            min-height: 100vh;
        }
        .admin-main {
            flex-grow: 1;
            padding: 2.5rem; /* Increased padding for main content area */
            background-color: #f5f7fa; /* Light grey-blue background */
        }
        .breadcrumb {
            margin-bottom: 2rem;
            font-size: 0.95rem;
            color: #6b7280;
        }

        /* Reusing form styles for consistent look where applicable */
        .form-section-title { /* Used for main page titles like "PRODUCTS" */
            font-size: 2.25rem; /* Large and bold title */
            font-weight: 700;
            color: #1f2937; /* Darker text for titles */
            margin-bottom: 2.5rem;
            text-align: left; /* Changed from center for products list */
        }

        /* Input field styling - Consistent with addProduct */
        input[type="text"],
        input[type="number"],
        select,
        textarea {
            padding: 0.8rem 1rem; /* Consistent padding */
            border: 1px solid #d1d5db; /* Light grey border */
            border-radius: 0.5rem; /* Rounded input fields */
            width: 100%;
            box-sizing: border-box;
            font-size: 0.95rem;
            color: #374151; /* Dark text in inputs */
            transition: border-color 0.2s ease, box-shadow 0.2s ease;
        }
        input[type="text"]:focus,
        input[type="number"]:focus,
        select:focus,
        textarea:focus {
            border-color: #6366f1; /* Indigo focus color */
            box-shadow: 0 0 0 3px rgba(99, 102, 241, 0.25); /* Matching glow */
            outline: none;
        }
        
        /* Main Action Buttons - Consistent with addProduct */
        .main-action-button {
            background-color: #4f46e5; /* Indigo */
            color: white;
            padding: 1rem 2.5rem;
            border-radius: 0.75rem;
            font-size: 1.15rem;
            font-weight: 600;
            letter-spacing: 0.05em;
            transition: background-color 0.2s ease, transform 0.2s ease, box-shadow 0.2s ease;
            box-shadow: 0 5px 15px rgba(79, 70, 229, 0.3); /* Button shadow */
            border: none; /* Ensure no default border */
            cursor: pointer;
            display: inline-flex;
            align-items: center;
            justify-content: center;
            gap: 0.5rem;
        }
        .main-action-button:hover {
            background-color: #4338ca;
            transform: translateY(-2px);
            box-shadow: 0 8px 20px rgba(79, 70, 229, 0.4);
        }

        /* Small Action Buttons (for table actions) - REVISED STYLES */
        .small-action-button {
            padding: 0.6rem 0.8rem; /* More padding to make them proper buttons */
            font-size: 0.9rem; /* Slightly smaller font for text/icon */
            border-radius: 0.5rem; /* Rounded pill shape */
            cursor: pointer;
            transition: all 0.2s ease;
            display: inline-flex;
            align-items: center;
            justify-content: center;
            gap: 0.3rem; /* Small gap if text/icon is used, for consistency */
            font-weight: 500; /* Medium font weight */
            border: 1px solid transparent; /* Start with transparent border */
            box-shadow: 0 2px 5px rgba(0, 0, 0, 0.05); /* Subtle shadow */
            text-decoration: none; /* Ensure no underline for links */
        }
        .small-action-button i {
            color: inherit; /* Icons inherit the button's text color */
        }

        /* Edit Button */
        .small-action-button.edit-btn {
            background-color: #e0f2fe; /* Light blue background */
            color: #007bff; /* Blue icon/text color */
            border-color: #a7d9ff; /* Border to match */
        }
        .small-action-button.edit-btn:hover {
            background-color: #bee3f8; /* Darker blue on hover */
            color: #0056b3; /* Darker blue icon/text on hover */
            transform: translateY(-1px) scale(1.02);
            box-shadow: 0 4px 8px rgba(0, 123, 255, 0.2);
        }

        /* Delete Button */
        .small-action-button.delete-btn {
            background-color: #ffe0e6; /* Light red background */
            color: #dc3545; /* Red icon/text color */
            border-color: #ffb3c1; /* Border to match */
        }
        .small-action-button.delete-btn:hover {
            background-color: #ffc2cc; /* Darker red on hover */
            color: #c82333; /* Darker red icon/text on hover */
            transform: translateY(-1.5px) scale(1.02); /* Slightly more pronounced */
            box-shadow: 0 4px 8px rgba(220, 53, 69, 0.2);
        }

        /* Restore Button */
        .small-action-button.restore-btn {
            background-color: #d4edda; /* Light green background */
            color: #28a745; /* Green icon/text color */
            border-color: #9cd4a7; /* Border to match */
        }
        .small-action-button.restore-btn:hover {
            background-color: #c3e6cb; /* Darker green on hover */
            color: #218838; /* Darker green icon/text on hover */
            transform: translateY(-1.5px) scale(1.02); /* Slightly more pronounced */
            box-shadow: 0 4px 8px rgba(40, 167, 69, 0.2);
        }


        /* Products Header */
        .products-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 25px; /* Adjust spacing */
            padding-bottom: 15px;
            border-bottom: 1px solid #e5e7eb; /* Subtle separator */
        }
        .right-actions {
            display: flex;
            gap: 15px; /* Increased gap for actions */
            align-items: center;
        }

        /* Product Search - Now uses general input style */
        #searchInput {
            width: 250px; /* Give it a defined width */
        }

        /* Add Button - Now uses general main-action-button style, but can be smaller */
        .add-btn {
            padding: 0.8rem 1.5rem; /* Slightly smaller than main-action-button */
            font-size: 0.95rem;
            border-radius: 0.6rem;
            background-color: #4f46e5; /* Primary color */
            color: white;
            border: none;
            cursor: pointer;
            font-weight: 600;
            transition: background-color 0.2s ease, transform 0.2s ease, box-shadow 0.2s ease;
            box-shadow: 0 3px 10px rgba(79, 70, 229, 0.2);
            display: inline-flex;
            align-items: center;
            gap: 0.5rem;
        }
        .add-btn:hover {
            background-color: #4338ca;
            transform: translateY(-1px);
            box-shadow: 0 5px 12px rgba(79, 70, 229, 0.3);
        }


        /* Product Table Style */
        table {
            width: 100%;
            border-collapse: collapse;
            margin-top: 25px;
            font-family: 'Inter', sans-serif; /* Modern font */
            background-color: #ffffff;
            border-radius: 0.75rem; /* More rounded corners */
            overflow: hidden;
            box-shadow: 0 10px 30px rgba(0, 0, 0, 0.08); /* More prominent shadow */
        }

        th, td {
            padding: 16px 20px; /* Increased padding */
            text-align: left;
            border-bottom: 1px solid #e0e0e0; /* Light border */
            color: #374151; /* Darker text */
        }
        th {
            background-color: #f9fafb; /* Lighter header background */
            font-weight: 600;
            color: #4b5563; /* Medium grey for headers */
            text-transform: uppercase;
            font-size: 0.85rem;
            letter-spacing: 0.05em;
        }
        tbody tr:last-child td {
            border-bottom: none; /* No border on last row */
        }
        tbody tr:hover {
            background-color: #f5f7fa; /* Subtle hover effect */
        }

        td img {
            width: 60px; /* Slightly larger images */
            height: 60px;
            object-fit: cover;
            border-radius: 0.5rem; /* More rounded image corners */
            border: 1px solid #e5e7eb; /* Lighter border */
            box-shadow: 0 2px 5px rgba(0, 0, 0, 0.05); /* Soft shadow for images */
        }

        /* Action column specifically to prevent wrapping and space buttons */
        td:last-child {
            white-space: nowrap;
            display: flex; /* Use flex to control spacing of inline-block forms */
            gap: 5px; /* Small gap between action buttons */
        }
        td:last-child form {
            display: inline-block; /* Ensure forms are treated as inline blocks for flex to work */
            margin: 0; /* Remove default form margin */
        }


        /* Pagination */
        .pagination {
            margin-top: 30px;
            text-align: center;
            display: flex; /* Use flex for better control */
            justify-content: center;
            align-items: center;
            gap: 8px; /* Gap between buttons */
        }

        .pagination a {
            display: inline-flex; /* Use flex for alignment of icon/text */
            align-items: center;
            justify-content: center;
            padding: 10px 16px; /* Larger clickable area */
            border: 1px solid #d1d5db;
            border-radius: 0.5rem; /* More rounded corners */
            background-color: #ffffff;
            color: #4b5563;
            text-decoration: none;
            transition: all 0.3s ease;
            min-width: 40px; /* Ensure minimum width for consistent shape */
        }

        .pagination a:hover {
            background-color: #eff6ff; /* Light blue hover */
            color: #4f46e5; /* Primary color text on hover */
            border-color: #93c5fd; /* Light blue border on hover */
        }

        .pagination a.active {
            background-color: #4f46e5; /* Primary background */
            color: white;
            border-color: #4f46e5;
            box-shadow: 0 3px 8px rgba(79, 70, 229, 0.2);
            font-weight: 600;
        }

        /* Modal Styles - Consistent with addProduct image crop modal */
        .modal {
            display: none;
            position: fixed;
            z-index: 1000; /* Higher z-index for modal */
            left: 0;
            top: 0;
            width: 100%;
            height: 100%;
            overflow: auto;
            background-color: rgba(0,0,0,0.7);
            justify-content: center;
            align-items: center;
            padding: 20px;
        }
        .modal-content {
            background-color: #fefefe;
            padding: 30px;
            border-radius: 12px;
            width: 95%;
            max-width: 500px; /* Adjusted max-width for edit modal */
            position: relative;
            box-shadow: 0 10px 30px rgba(0, 0, 0, 0.3);
            animation: fadeInScale 0.3s ease-out;
        }
        @keyframes fadeInScale {
            from { opacity: 0; transform: scale(0.95); }
            to { opacity: 1; transform: scale(1); }
        }
        .close-button { /* Renamed from .close for consistency */
            color: #9ca3af;
            position: absolute;
            top: 15px;
            right: 20px;
            font-size: 36px;
            font-weight: bold;
            cursor: pointer;
            transition: color 0.2s ease;
        }
        .close-button:hover {
            color: #4b5563;
        }
        .modal-title { /* For the "Edit Product" header in modal */
            font-size: 2rem;
            font-weight: 700;
            color: #1f2937;
            margin-bottom: 1.5rem;
            text-align: center;
        }
        /* Modal form specific styles */
        .modal-content form {
            display: flex;
            flex-direction: column;
            gap: 1rem;
        }
        .modal-content label {
            display: block;
            font-size: 0.9rem;
            font-weight: 600;
            color: #374151;
            margin-bottom: 0.25rem;
        }
        .modal-content input[type="text"],
        .modal-content input[type="number"],
        .modal-content input[type="file"],
        .modal-content select { /* Added input[type=file] and select */
             margin-bottom: 0; /* Remove default margin from inputs */
        }
        .modal-content small {
            font-size: 0.85em;
            color: #6b7280;
            margin-top: -0.5rem;
            margin-bottom: 0.5rem;
            display: block;
        }
        .modal-content button[type="submit"] {
            background-color: #22c55e; /* Green for confirm */
            color: white;
            padding: 0.9rem 2rem;
            border-radius: 0.6rem;
            font-size: 1rem;
            font-weight: 600;
            transition: background-color 0.2s ease, transform 0.2s ease;
            box-shadow: 0 2px 5px rgba(0,0,0,0.1);
            border: none;
            cursor: pointer;
            margin-top: 1rem;
        }
        .modal-content button[type="submit"]:hover {
            background-color: #16a34a;
            transform: translateY(-1px);
        }

    </style>
</head>
<body>

    <%- include('../partials/admin/adminnavbar') %>

    <div class="admin-wrapper">
        <%- include('../partials/admin/adminsidebar', { current: 'products' }) %>

        <div class="admin-main" style="margin-left: 250px; margin-top: 85px;">
            <div class="breadcrumb">Admin > Products</div>

            <div class="products-header">
                <h2 class="form-section-title" style="margin-bottom: 0;">PRODUCTS</h2>

                <div class="right-actions">
                    <input type="text" placeholder="🔍 Search products" id="searchInput" class="product-search" />
                    <a href="/admin/addproducts">
                        <button class="add-btn">
                            <i class="fas fa-plus-circle"></i> Add Product
                        </button>
                    </a>
                </div>
            </div>

            <table>
                <thead>
                    <tr>
                        <th>Image</th>
                        <th>Name</th>
                        <th>Min. Price</th>
                        <th>Category</th>
                        <th>Added Date</th>
                        <th>Actions</th>
                    </tr>
                </thead>
                <tbody>
                    <% if (products && products.length > 0) { %>
                        <% products.forEach((product) => { %>
                            <tr>
                                <td>
                                    <% 
                                        const defaultImageUrl = '/images/placeholder.png'; // Make sure you have this image
                                        let imageUrl = defaultImageUrl;
                                        if (product.variants && product.variants.length > 0 && product.variants[0].images && product.variants[0].images.length > 0) {
                                            imageUrl = product.variants[0].images[0];
                                        } else if (product.images && product.images.length > 0) { // Fallback for old schema or products without variants images
                                            imageUrl = product.images[0];
                                        }
                                    %>
                                    <img src="<%= imageUrl %>" alt="<%= product.title %>">
                                </td>
                                <td><%= product.title %></td>
                                <td>
                                    <%
                                        let minPrice = Infinity;
                                        if (product.variants && product.variants.length > 0) {
                                            product.variants.forEach(variant => {
                                                if (variant.sizes && variant.sizes.length > 0) {
                                                    variant.sizes.forEach(size => {
                                                        if (size.price && typeof size.price === 'number' && size.price < minPrice) {
                                                            minPrice = size.price;
                                                        }
                                                    });
                                                }
                                            });
                                        }
                                    %>
                                    <% if (minPrice !== Infinity) { %>
                                        ₹<%= minPrice.toLocaleString() %>
                                    <% } else { %>
                                        N/A
                                    <% } %>
                                </td>
                                <td><%= product.category_name || 'N/A' %></td>
                                <td><%= new Date(product.createdAt).toLocaleDateString('en-US', { year: 'numeric', month: 'short', day: 'numeric' }) %></td>
                                <td>
                                    <button class="small-action-button edit-btn"
                                        data-id="<%= product._id %>"
                                        data-title="<%= product.title %>"
                                        data-min-price="<%= minPrice !== Infinity ? minPrice : '' %>" data-category-id="<%= product.category_id || '' %>"
                                        data-brand-id="<%= product.brand_id || '' %>"
                                        data-image-url="<%= imageUrl %>"> <i class="fas fa-pen"></i>
                                    </button>

                                    <% if (product.isDeleted) { %>
                                        <form action="/admin/products/restore/<%= product._id %>?page=<%= currentPage %>" method="POST" style="display:inline-block;">
                                            <button type="submit" class="small-action-button restore-btn" title="Restore">
                                                <i class="fas fa-plus-circle"></i>
                                            </button>
                                        </form>
                                    <% } else { %>
                                        <form action="/admin/products/delete/<%= product._id %>?page=<%= currentPage %>" method="POST" style="display:inline-block;">
                                            <button type="submit" onclick="return confirm('Are you sure you want to soft delete this product?')" class="small-action-button delete-btn" title="Soft Delete">
                                                <i class="fas fa-trash"></i>
                                            </button>
                                        </form>
                                    <% } %>
                                </td>
                            </tr>
                        <% }) %>
                    <% } else { %>
                        <tr><td colspan="6" style="text-align:center; color:gray; padding: 20px;">No products available.</td></tr>
                    <% } %>
                </tbody>
            </table>
            <% if (totalPages > 1) { %>
                <div class="pagination">
                    <% if (currentPage > 1) { %>
                        <a href="?page=<%= currentPage - 1 %>">&laquo;</a>
                    <% } %>

                    <% for (let i = 1; i <= totalPages; i++) { %>
                        <a href="?page=<%= i %>" class="<%= currentPage === i ? 'active' : '' %>"><%= i %></a>
                    <% } %>

                    <% if (currentPage < totalPages) { %>
                        <a href="?page=<%= currentPage + 1 %>">&raquo;</a>
                    <% } %>
                </div>
            <% } %>

        </div>
    </div>

    <div id="editModal" class="modal">
        <div class="modal-content">
            <span class="close-button" onclick="closeModal()">&times;</span>
            <h3 class="modal-title">Edit Product Details</h3>
            <form id="editForm" method="POST" enctype="multipart/form-data"> <label for="modalTitle">Product Title:</label>
                <input type="text" name="title" id="modalTitle" required>

                <label for="modalPrice">Default Price:</label>
                <input type="number" name="price" id="modalPrice" required min="0">
                <small>* This price will be applied to all existing size variants. For specific variant pricing, use the full edit page.</small>

                <label for="modalCategory">Category:</label>
                <select id="modalCategory" name="category_id" required>
                    </select>

                <label for="modalBrand">Brand:</label>
                <select id="modalBrand" name="brand_id" required>
                    </select>

                <label for="modalImage">Product Image:</label>
                <input type="file" name="image" id="modalImage" accept="image/*">
                <img id="imagePreview" src="" alt="Image Preview" style="max-width: 100px; max-height: 100px; object-fit: contain; margin-top: 10px; border-radius: 5px; display: none; border: 1px solid #ddd;">

                <button type="submit">Update Product</button>
            </form>
        </div>
    </div>

    <script>
        /// Edit Modal JS \\\
        const modal = document.getElementById("editModal");
        const modalTitle = document.getElementById("modalTitle");
        const modalPrice = document.getElementById("modalPrice");
        const modalCategory = document.getElementById("modalCategory");
        const modalBrand = document.getElementById("modalBrand");
        const modalImage = document.getElementById("modalImage");
        const imagePreview = document.getElementById("imagePreview");
        const form = document.getElementById("editForm");

        // Helper to populate select options (reused from addProduct)
        function populateSelect(selectElement, items, selectedId) {
            selectElement.innerHTML = '';
            if (!items || items.length === 0) {
                const option = document.createElement('option');
                option.value = '';
                option.textContent = `No ${selectElement.id.replace('modal', '').toLowerCase()}s found`;
                option.disabled = true;
                option.selected = true;
                selectElement.appendChild(option);
                return;
            }

            items.forEach(item => {
                const option = document.createElement('option');
                option.value = item._id;
                option.textContent = item.name;
                if (item._id === selectedId) {
                    option.selected = true;
                }
                selectElement.appendChild(option);
            });
        }

        // Categories and Brands data from server (make sure your Express route passes them!)
        const categories = <%- JSON.stringify(typeof categories !== 'undefined' ? categories : []) %>;
        const brands = <%- JSON.stringify(typeof brands !== 'undefined' ? brands : []) %>;


        document.querySelectorAll(".edit-btn").forEach(btn => {
            btn.addEventListener("click", () => {
                const id = btn.dataset.id;
                const title = btn.dataset.title;
                const minPrice = btn.dataset.minPrice;
                const categoryId = btn.dataset.categoryId;
                const brandId = btn.dataset.brandId;
                const imageUrl = btn.dataset.imageUrl;

                modalTitle.value = title;
                modalPrice.value = minPrice;

                populateSelect(modalCategory, categories, categoryId);
                populateSelect(modalBrand, brands, brandId);

                // Set image preview
                if (imageUrl) {
                    imagePreview.src = imageUrl;
                    imagePreview.style.display = 'block';
                } else {
                    imagePreview.src = '';
                    imagePreview.style.display = 'none';
                }
                modalImage.value = ''; // Clear file input value

                form.action = `/admin/products/edit/${id}`;
                modal.style.display = "flex";
            });
        });

        // Image preview logic
        modalImage.addEventListener('change', function() {
            if (this.files && this.files[0]) {
                const reader = new FileReader();
                reader.onload = function(e) {
                    imagePreview.src = e.target.result;
                    imagePreview.style.display = 'block';
                };
                reader.readAsDataURL(this.files[0]);
            } else {
                imagePreview.src = '';
                imagePreview.style.display = 'none';
            }
        });


        function closeModal() {
            modal.style.display = "none";
            form.reset(); // Reset form fields on close
            imagePreview.src = ''; // Clear image preview
            imagePreview.style.display = 'none';
        }

        window.onclick = function(event) {
            if (event.target == modal) {
                closeModal();
            }
        }

        //// SEARCH JS \\\\
        const searchInput = document.getElementById('searchInput');
        const tableBody = document.querySelector('tbody');
        const paginationDiv = document.querySelector('.pagination');

        searchInput.addEventListener('input', async () => {
            const query = searchInput.value.trim();

            try {
                const res = await axios.get(`/admin/products-search?search=${query}`);
                const products = res.data.products;

                tableBody.innerHTML = '';

                if (products.length === 0) {
                    tableBody.innerHTML = `<tr><td colspan="6" style="text-align:center; color:gray; padding: 20px;">No products found.</td></tr>`;
                    if (paginationDiv) paginationDiv.style.display = 'none';
                    return;
                }

                if (paginationDiv) paginationDiv.style.display = 'flex';

                products.forEach((product) => {
                    let minPrice = Infinity;
                    if (product.variants && product.variants.length > 0) {
                        product.variants.forEach(variant => {
                            if (variant.sizes && variant.sizes.length > 0) {
                                variant.sizes.forEach(size => {
                                    if (size.price && typeof size.price === 'number' && size.price < minPrice) {
                                        minPrice = size.price;
                                    }
                                });
                            }
                        });
                    }
                    const displayPrice = minPrice !== Infinity ? `₹${minPrice.toLocaleString()}` : 'N/A';

                    const defaultImageUrl = '/images/placeholder.png';
                    let imageUrl = defaultImageUrl;
                    if (product.variants && product.variants.length > 0 && product.variants[0].images && product.variants[0].images.length > 0) {
                        imageUrl = product.variants[0].images[0];
                    } else if (product.images && product.images.length > 0) {
                        imageUrl = product.images[0];
                    }

                    const row = `
                        <tr>
                            <td><img src="${imageUrl}" alt="${product.title}" style="width: 60px; height: 60px; object-fit: cover; border-radius: 0.5rem; border: 1px solid #e5e7eb; box-shadow: 0 2px 5px rgba(0, 0, 0, 0.05);" /></td>
                            <td>${product.title}</td>
                            <td>${displayPrice}</td>
                            <td>${product.category_name || 'N/A'}</td>
                            <td>${new Date(product.createdAt).toLocaleDateString('en-US', { year: 'numeric', month: 'short', day: 'numeric' })}</td>
                            <td>
                                <button class="small-action-button edit-btn"
                                    data-id="${product._id}"
                                    data-title="${product.title}"
                                    data-min-price="${minPrice !== Infinity ? minPrice : ''}"
                                    data-category-id="${product.category_id || ''}"
                                    data-brand-id="${product.brand_id || ''}"
                                    data-image-url="${imageUrl}">
                                    <i class="fas fa-pen"></i>
                                </button>
                                ${
                                    product.isDeleted
                                        ? `<form action="/admin/products/restore/${product._id}" method="POST" style="display:inline-block;">
                                            <button type="submit" class="small-action-button restore-btn" title="Restore">
                                                <i class="fas fa-plus-circle"></i>
                                            </button>
                                        </form>`
                                        : `<form action="/admin/products/delete/${product._id}" method="POST" style="display:inline-block;">
                                            <button type="submit" onclick="return confirm('Are you sure you want to soft delete this product?')" title="Soft Delete" class="small-action-button delete-btn">
                                                <i class="fas fa-trash"></i>
                                            </button>
                                        </form>`
                                }
                            </td>
                        </tr>`;
                    tableBody.innerHTML += row;
                });

                // Re-attach event listeners to new edit buttons after search update
                document.querySelectorAll(".edit-btn").forEach(btn => {
                    btn.addEventListener("click", () => {
                        const id = btn.dataset.id;
                        const title = btn.dataset.title;
                        const minPrice = btn.dataset.minPrice;
                        const categoryId = btn.dataset.categoryId;
                        const brandId = btn.dataset.brandId;
                        const imageUrl = btn.dataset.imageUrl;

                        modalTitle.value = title;
                        modalPrice.value = minPrice;

                        populateSelect(modalCategory, categories, categoryId);
                        populateSelect(modalBrand, brands, brandId);

                        if (imageUrl) {
                            imagePreview.src = imageUrl;
                            imagePreview.style.display = 'block';
                        } else {
                            imagePreview.src = '';
                            imagePreview.style.display = 'none';
                        }
                        modalImage.value = ''; // Clear file input value

                        form.action = `/admin/products/edit/${id}`;
                        modal.style.display = "flex";
                    });
                });

            } catch (err) {
                console.error('🔥 Search failed:', err);
                tableBody.innerHTML = `<tr><td colspan="6" style="text-align:center; color:red; padding: 20px;">Error loading products. Please try again.</td></tr>`;
                if (paginationDiv) paginationDiv.style.display = 'none';
            }
        });
    </script>
</body>
</html>