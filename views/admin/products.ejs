<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>Admin - Products</title>

    <link rel="stylesheet" href="/styles/admin/adminnavbar.css">
    <link rel="stylesheet" href="/styles/admin/adminsidebar.css">
    <link rel="stylesheet" href="/styles/admin/products.css">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css" />
    <script src="https://cdn.jsdelivr.net/npm/axios/dist/axios.min.js"></script>
</head>
<body>

    <%- include('../partials/admin/adminnavbar') %>

    <div class="admin-wrapper">
        <%- include('../partials/admin/adminsidebar', { current: 'products' }) %>

        <div class="admin-main" style="margin-left: 250px; margin-top: 85px;">
            <div class="breadcrumb">Admin > Products</div>

            <div class="products-header">
                <h2 class="form-section-title" style="margin-bottom: 0;">PRODUCTS</h2>

                <div class="right-actions">
                    <input type="text" placeholder="🔍 Search products" id="searchInput" class="product-search" />
                    <a href="/admin/addproducts">
                        <button class="add-btn">
                            <i class="fas fa-plus-circle"></i> Add Product
                        </button>
                    </a>
                </div>
            </div>

            <table>
                <thead>
                    <tr>
                        <th>IMAGE</th>
                        <th>NAME</th>
                        <th>PRICE</th>
                        <th>CATEGORY</th>
                        <th>BRAND</th>
                        <th>DATE</th>
                        <th>ACTIONS</th>
                    </tr>
                </thead>
                <tbody>
                    <% if (products && products.length > 0) { %>
                        <% products.forEach((product) => { %>
                            <tr id="product-row-<%= product._id %>">
                                <td>
                                    <img src="<%= product.display_image_url || '/images/placeholder.png' %>"
                                         alt="<%= product.title %>"
                                         style="width: 30px; height: 30px; object-fit: cover; border-radius: 0.5rem; border: 1px solid #e5e7eb; box-shadow: 0 2px 5px rgba(0, 0, 0, 0.05);" />
                                </td>
                                <td><%= product.title %></td>
                                <td>
                                    <% if (product.min_price !== undefined && product.min_price !== null) { %>
                                        ₹<%= product.min_price.toLocaleString() %>
                                    <% } else { %>
                                        N/A
                                    <% } %>
                                </td>
                                <td><%= product.category_name || 'N/A' %></td>
                                <td><%= product.brand_name || 'N/A' %></td>
                                <td><%= new Date(product.createdAt).toLocaleDateString('en-US', { year: 'numeric', month: 'short', day: 'numeric' }) %></td>
                                <td>
                                  <a href="/admin/editproduct/<%= product._id %>" class="small-action-button edit-btn" title="Edit Product">
                                   <i class="fas fa-pen"></i>
                                       </a>
                                    <div class="action-buttons-container">
                                        <form class="restore-form" data-product-id="<%= product._id %>" style="display:inline-block; <%= product.isDeleted ? '' : 'display: none;' %>">
                                            <button type="submit" class="small-action-button restore-btn" title="Restore">
                                                <i class="fas fa-plus-circle"></i>
                                            </button>
                                        </form>
                                        <form class="delete-form" data-product-id="<%= product._id %>" style="display:inline-block; <%= product.isDeleted ? 'display: none;' : '' %>">
                                            <button type="submit" class="small-action-button delete-btn" title="Soft Delete">
                                                <i class="fas fa-trash"></i>
                                            </button>
                                        </form>
                                    </div>
                                </td>
                            </tr>
                        <% }) %>
                    <% } else { %>
                        <tr><td colspan="7" style="text-align:center; color:gray; padding: 20px;">No products available.</td></tr>
                    <% } %>
                </tbody>
            </table>
            <% if (totalPages > 1) { %>
                <div class="pagination">
                    <% if (currentPage > 1) { %>
                        <a href="?page=<%= currentPage - 1 %>">&laquo;</a>
                    <% } %>

                    <% for (let i = 1; i <= totalPages; i++) { %>
                        <a href="?page=<%= i %>" class="<%= currentPage === i ? 'active' : '' %>"><%= i %></a>
                    <% } %>

                    <% if (currentPage < totalPages) { %>
                        <a href="?page=<%= currentPage + 1 %>">&raquo;</a>
                    <% } %>
                </div>
            <% } %>

        </div>
    </div>

   <script>
    //// SEARCH JS \\\\
    const searchInput = document.getElementById('searchInput');
    const tableBody = document.querySelector('tbody');
    const paginationDiv = document.querySelector('.pagination');

    // Keep track of the current page for search results
    let currentSearchPage = 1;
    let currentSearchQuery = ''; // To store the last searched query

    // Function to perform the search with pagination
    async function performSearch(page = 1) {
        const query = searchInput.value.trim();
        currentSearchQuery = query; // Update the current search query
        currentSearchPage = page; // Update the current page for search

        try {
            const res = await axios.get(`/admin/products-search?search=${query}&page=${page}`);
            const products = res.data.products;
            const totalPages = res.data.totalPages;
            const currentPage = res.data.currentPage;

            tableBody.innerHTML = ''; // Clear existing table rows

            if (products.length === 0) {
                tableBody.innerHTML = `<tr><td colspan="7" style="text-align:center; color:gray; padding: 20px;">No products found.</td></tr>`;
                if (paginationDiv) paginationDiv.style.display = 'none';
            } else {
                if (paginationDiv) paginationDiv.style.display = 'flex'; // Show pagination if results exist

                products.forEach((product) => {
                    const displayImageUrl = product.display_image_url || '/images/placeholder.png';
                    const displayPrice = (product.min_price !== undefined && product.min_price !== null) ? `₹${product.min_price.toLocaleString()}` : 'N/A';

                    const row = `
                        <tr id="product-row-${product._id}">
                            <td><img src="${displayImageUrl}" alt="${product.title}" style="width: 30px; height: 30px; object-fit: cover; border-radius: 0.5rem; border: 1px solid #e5e7eb; box-shadow: 0 2px 5px rgba(0, 0, 0, 0.05);" /></td>
                            <td>${product.title}</td>
                            <td>${displayPrice}</td>
                            <td>${product.category_name || 'N/A'}</td>
                            <td>${product.brand_name || 'N/A'}</td>
                            <td>${new Date(product.createdAt).toLocaleDateString('en-US', { year: 'numeric', month: 'short', day: 'numeric' })}</td>
                            <td>
                                <a href="/admin/addproducts/${product._id}" class="small-action-button edit-btn" title="Edit Product">
                                    <i class="fas fa-pen"></i>
                                </a>
                                <div class="action-buttons-container">
                                    ${
                                        product.isDeleted
                                            ? `
                                                <form class="restore-form" data-product-id="${product._id}" style="display:inline-block;">
                                                    <button type="submit" class="small-action-button restore-btn" title="Restore">
                                                        <i class="fas fa-plus-circle"></i>
                                                    </button>
                                                </form>
                                                <form class="delete-form" data-product-id="${product._id}" style="display:inline-block; display: none;">
                                                    <button type="submit" class="small-action-button delete-btn" title="Soft Delete">
                                                        <i class="fas fa-trash"></i>
                                                    </button>
                                                </form>
                                            `
                                            : `
                                                <form class="restore-form" data-product-id="${product._id}" style="display:inline-block; display: none;">
                                                    <button type="submit" class="small-action-button restore-btn" title="Restore">
                                                        <i class="fas fa-plus-circle"></i>
                                                    </button>
                                                </form>
                                                <form class="delete-form" data-product-id="${product._id}" style="display:inline-block;">
                                                    <button type="submit" class="small-action-button delete-btn" title="Soft Delete">
                                                        <i class="fas fa-trash"></i>
                                                    </button>
                                                </form>
                                            `
                                    }
                                </div>
                            </td>
                        </tr>`;
                    tableBody.innerHTML += row;
                });

                // Dynamically create pagination links for search results
                renderPagination(currentPage, totalPages);
            }
        } catch (err) {
            console.error('🔥 Search failed:', err);
            tableBody.innerHTML = `<tr><td colspan="7" style="text-align:center; color:red; padding: 20px;">Error loading products. Please try again.</td></tr>`;
            if (paginationDiv) paginationDiv.style.display = 'none';
        }
    }

    // Function to render pagination links based on current search results
    function renderPagination(currentPage, totalPages) {
        if (!paginationDiv) return; // Exit if pagination div doesn't exist

        paginationDiv.innerHTML = ''; // Clear existing pagination

        if (totalPages > 1) {
            // Previous button
            if (currentPage > 1) {
                const prevLink = document.createElement('a');
                prevLink.href = '#'; // Use # for AJAX pagination
                prevLink.innerHTML = '&laquo;';
                prevLink.addEventListener('click', (e) => {
                    e.preventDefault();
                    performSearch(currentPage - 1);
                });
                paginationDiv.appendChild(prevLink);
            }

            // Page numbers
            for (let i = 1; i <= totalPages; i++) {
                const pageLink = document.createElement('a');
                pageLink.href = '#'; // Use # for AJAX pagination
                pageLink.textContent = i;
                if (currentPage === i) {
                    pageLink.classList.add('active');
                }
                pageLink.addEventListener('click', (e) => {
                    e.preventDefault();
                    performSearch(i);
                });
                paginationDiv.appendChild(pageLink);
            }

            // Next button
            if (currentPage < totalPages) {
                const nextLink = document.createElement('a');
                nextLink.href = '#'; // Use # for AJAX pagination
                nextLink.innerHTML = '&raquo;';
                nextLink.addEventListener('click', (e) => {
                    e.preventDefault();
                    performSearch(currentPage + 1);
                });
                paginationDiv.appendChild(nextLink);
            }
        }
    }

    // Event listener for search input (triggers search on change/type)
    searchInput.addEventListener('input', () => {
        performSearch(1); // Start search from page 1 whenever input changes
    });

    async function handleProductAction(productId, actionType) {
        const url = `/admin/products/${actionType}/${productId}`; // e.g., /admin/products/delete/123 or /admin/products/restore/123
        const confirmationMessage = actionType === 'delete'
            ? 'Are you sure you want to soft delete this product?'
            : 'Are you sure you want to restore this product?';

        if (!confirm(confirmationMessage)) {
            return; // User cancelled
        }

        try {
            const response = await axios.post(url);
            if (response.data.success) {
                const productRow = document.getElementById(`product-row-${productId}`);
                if (productRow) {
                    const deleteForm = productRow.querySelector('.delete-form');
                    const restoreForm = productRow.querySelector('.restore-form');

                    if (actionType === 'delete') {
                        deleteForm.style.display = 'none';
                        restoreForm.style.display = 'inline-block';
                    } else { // actionType === 'restore'
                        deleteForm.style.display = 'inline-block';
                        restoreForm.style.display = 'none';
                    }
                    alert(response.data.message); // Show success message
                }
            } else {
                alert(response.data.message || 'Action failed!');
            }
        } catch (error) {
            console.error(`Error ${actionType}ing product:`, error);
            alert(`Failed to ${actionType} product. Please try again.`);
        }
    }

    // Attach event listeners using delegation to handle dynamically added rows (from search)
    tableBody.addEventListener('submit', (e) => {
        // Check if the submitted form is a delete or restore form
        if (e.target.classList.contains('delete-form')) {
            e.preventDefault(); // Prevent default form submission
            const productId = e.target.dataset.productId;
            handleProductAction(productId, 'delete');
        } else if (e.target.classList.contains('restore-form')) {
            e.preventDefault(); // Prevent default form submission
            const productId = e.target.dataset.productId;
            handleProductAction(productId, 'restore');
        }
    });
</script>
</body>
</html>