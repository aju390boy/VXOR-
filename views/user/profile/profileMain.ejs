<%# views/user/profile/profileMain.ejs %>
<% title = 'VIXOR | My Profile'; -%>

<%# Breadcrumb %>
<div class="flex justify-between items-center px-6 py-2 bg-gray-900 mt-2 flex-wrap gap-1">
    <div class="breadcrumb text-xs text-gray-400">
        <a href="/user/home" class="text-gray-400 font-bold hover:text-white">HOME</a> > <span>MY PROFILE</span>
    </div>
</div>

<div class="flex flex-col md:flex-row px-10 py-2 bg-gray-900 min-h-5 text-gray-400">

    <%# Sidebar Navigation - NOW STICKY AND CONTENT-HEIGHT %>
    <aside id="profile-sidebar" class="
        w-full md:w-1/4 lg:w-1/5
        p-4 md:p-6 border-r border-gray-800 bg-gray-900
        sticky top-[6.5rem]
        h-fit
        md:self-start
        z-0
    ">
        <h2 class="text-lg font-bold mb-7 text-white  border-b border-gray-700 pb-2">MY ACCOUNT</h2>
        <ul class="flex flex-col gap-2">
            <li>
                <a href="/user/profile/section/profile" data-section="profile" class="sidebar-link flex items-center gap-3 py-4 px-2 rounded text-gray-400 hover:bg-gray-800 hover:text-white transition duration-200">
                    <i class="fa-regular fa-user"></i> PROFILE
                </a>
            </li>
            <li>
                <a href="/user/profile/section/orders" data-section="orders" class="sidebar-link flex items-center gap-3 py-4 px-2 rounded text-gray-400 hover:bg-gray-800 hover:text-white transition duration-200">
                    <i class="fa-solid fa-box"></i> ORDERS
                </a>
            </li>
            <li>
                <a href="/user/profile/section/wishlist" data-section="wishlist" class="sidebar-link flex items-center gap-3 py-4 px-2 rounded text-gray-400 hover:bg-gray-800 hover:text-white transition duration-200">
                    <i class="fa-regular fa-heart"></i> WISHLIST
                </a>
            </li>
            <li>
                <a href="/user/profile/section/address" data-section="address" class="sidebar-link flex items-center gap-3 py-4 px-2 rounded text-gray-400 hover:bg-gray-800 hover:text-white transition duration-200">
                    <i class="fa-solid fa-location-dot"></i> ADDRESS
                </a>
            </li>
            <li>
                <a href="/user/profile/section/change-password" data-section="change-password" class="sidebar-link flex items-center gap-3 py-4 px-2 rounded text-gray-400 hover:bg-gray-800 hover:text-white transition duration-200">
                    <i class="fa-solid fa-key"></i> PASSWORD
                </a>
            </li>
            <li>
                <a href="/user/profile/section/wallet" data-section="wallet" class="sidebar-link flex items-center gap-3 py-4 px-2 rounded text-gray-400 hover:bg-gray-800 hover:text-white transition duration-200">
                    <i class="fa-solid fa-wallet"></i> WALLET
                </a>
            </li>
            <li class="mt-4 border-t border-gray-700 pt-4">
                <a href="/logout" class="block py-2 px-3 rounded bg-red-600 text-white font-bold hover:bg-red-700 transition duration-200">
                    <i class="fa-solid fa-right-from-bracket"></i> LOGOUT
                </a>
            </li>
        </ul>
    </aside>

    <%# Main Content Area %>
    <main class="flex-1 px-1 md:px-1 py-1 bg-gray-900 flex justify-center ">
        <div id="profile-content" class="w-full max-w-2xl bg-gray-900 p-1 rounded-md shadow-md md-12">
            <%- include('partials/_profileDetails', { user: user }) %>
        </div>
    </main>
</div>

<%# SweetAlert2 CSS - Ensure this is linked! %>
<link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/sweetalert2@11/dist/sweetalert2.min.css">
<%# SweetAlert2 JS - Keep this at the end of the file %>
<script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>

<%# Script for sidebar link handling %>
<script>
    document.addEventListener('DOMContentLoaded', () => {
        const profileContentArea = document.getElementById('profile-content');
        const sidebarLinks = document.querySelectorAll('.sidebar-link');

        const loadSection = async (sectionName) => {
            try {
                const response = await fetch(`/user/profile/section/${sectionName}`);
                if (!response.ok) {
                    const errorMessage = await response.text();
                    Swal.fire({
                        icon: 'error',
                        title: 'Error!',
                        text: `Error loading section: ${errorMessage}`,
                        customClass: { popup: 'swal-dark-bg', title: 'swal-dark-title', content: 'swal-dark-content', confirmButton: 'swal-dark-button' }
                    });
                    profileContentArea.innerHTML = ''; // Clear content area on error
                    return;
                }
                const htmlContent = await response.text();
                profileContentArea.innerHTML = htmlContent;

                // IMPORTANT: After new content is loaded, re-attach event listeners
                attachProfileFormListener(); // This function will now handle both forms
                attachChangePasswordFormListener(); // New function for password form
            } catch (error) {
                console.error('Error fetching profile section:', error);
                Swal.fire({
                    icon: 'error',
                    title: 'Network Error!',
                    text: 'Failed to load section content due to a network error.',
                    customClass: { popup: 'swal-dark-bg', title: 'swal-dark-title', content: 'swal-dark-content', confirmButton: 'swal-dark-button' }
                });
                profileContentArea.innerHTML = ''; // Clear content area on error
            }
        };

        // Add click event listeners to sidebar links
        sidebarLinks.forEach(link => {
            link.addEventListener('click', (event) => {
                event.preventDefault();
                const sectionName = event.currentTarget.dataset.section;

                // Remove 'active' class from all links
                sidebarLinks.forEach(item => item.classList.remove('active', 'bg-gray-700', 'text-white'));
                // Add 'active' class to clicked link
                event.currentTarget.classList.add('active', 'bg-gray-700', 'text-white');

                loadSection(sectionName);
            });
        });

        // Helper function to clear all error messages
        const clearErrorMessages = (formId) => {
            document.querySelectorAll(`#${formId} .error-message`).forEach(el => el.textContent = '');
            document.querySelectorAll(`#${formId} input`).forEach(input => input.classList.remove('border-red-500'));
        };

        // Function to attach listener to the profile update form
       const attachProfileFormListener = () => {
    const profileUpdateForm = document.getElementById('profile-update-form');
    
    // Select the file input and image preview elements
    const profilePictureInput = document.getElementById('profile-picture-input');
    const profileImagePreview = document.getElementById('profile-image-preview');
    
    // Check if the elements exist before adding listeners
    if(profilePictureInput && profileImagePreview) {
        profilePictureInput.addEventListener('change', (e) => {
            const file = e.target.files[0];
            if (file) {
                const reader = new FileReader();
                reader.onload = (event) => {
                    profileImagePreview.src = event.target.result;
                };
                reader.readAsDataURL(file);
            }
        });
    }

    if (profileUpdateForm) {
        profileUpdateForm.addEventListener('submit', async (event) => {
            event.preventDefault();
            
            // CORRECT: Use FormData directly for file uploads
            const formData = new FormData(profileUpdateForm);
            
            try {
                const response = await fetch('/user/profile/update', {
                    method: 'POST',
                    // REMOVED: `headers: { 'Content-Type': 'application/json' }`
                    // The browser will automatically set the correct 'multipart/form-data' header
                    body: formData // CORRECT: Send the FormData object directly
                });

                const result = await response.json();

                if (response.ok) {
                    Swal.fire({
                        icon: 'success',
                        title: 'Success!',
                        text: result.message || 'Profile updated successfully!',
                        customClass: { popup: 'swal-dark-bg', title: 'swal-dark-title', content: 'swal-dark-content', confirmButton: 'swal-dark-button' }
                    });
                    setTimeout(() => {
                        loadSection('profile');
                    }, 1500);
                } else {
                     Swal.fire({
                        icon: 'error',
                        title: 'Oops...',
                        text: result.message || 'Failed to update profile. Please try again.',
                        customClass: { popup: 'swal-dark-bg', title: 'swal-dark-title', content: 'swal-dark-content', confirmButton: 'swal-dark-button' }
                    });
                }

            } catch (error) {
                console.error('Error submitting profile update:', error);
                Swal.fire({
                    icon: 'error',
                    title: 'Network Error!',
                    text: 'Could not connect to server. Please check your internet connection.',
                    customClass: { popup: 'swal-dark-bg', title: 'swal-dark-title', content: 'swal-dark-content', confirmButton: 'swal-dark-button' }
                });
            }
        });
    }
};
        // Function to attach listener to the change password form
        const attachChangePasswordFormListener = () => {
            const changePasswordForm = document.getElementById('change-password-form');

            if (changePasswordForm) {
                changePasswordForm.addEventListener('submit', async (event) => {
                    event.preventDefault();
                    clearErrorMessages('change-password-form'); // Clear previous errors

                    const formData = new FormData(changePasswordForm);
                    const data = Object.fromEntries(formData.entries());

                    try {
                        const response = await fetch('/user/profile/change-password', {
                            method: 'POST',
                            headers: { 'Content-Type': 'application/json' },
                            body: JSON.stringify(data)
                        });

                        const result = await response.json();

                        if (response.ok) {
                            Swal.fire({
                                icon: 'success',
                                title: 'Success!',
                                text: result.message || 'Password updated successfully!',
                                customClass: { popup: 'swal-dark-bg', title: 'swal-dark-title', content: 'swal-dark-content', confirmButton: 'swal-dark-button' }
                            });
                            // Clear form fields after successful update
                            changePasswordForm.reset();
                            // Optional: Reload section if you want to ensure state consistency
                            // setTimeout(() => { loadSection('change-password'); }, 1500);
                        } else {
                            // Display field-specific errors if available
                            if (result.errors) {
                                for (const field in result.errors) {
                                    const errorElement = document.getElementById(`${field}Error`);
                                    if (errorElement) {
                                        errorElement.textContent = result.errors[field];
                                        const inputElement = changePasswordForm.querySelector(`[name="${field}"]`);
                                        if (inputElement) {
                                            inputElement.classList.add('border-red-500'); // Highlight input field
                                        }
                                    }
                                }
                            }
                            // Display general error message with SweetAlert
                            Swal.fire({
                                icon: 'error',
                                title: 'Validation Error!',
                                text: result.message || 'Please correct the errors in the form.',
                                customClass: { popup: 'swal-dark-bg', title: 'swal-dark-title', content: 'swal-dark-content', confirmButton: 'swal-dark-button' }
                            });
                        }
                    } catch (error) {
                        console.error('Error submitting change password:', error);
                        Swal.fire({
                            icon: 'error',
                            title: 'Network Error!',
                            text: 'Could not connect to server. Please check your internet connection.',
                            customClass: { popup: 'swal-dark-bg', title: 'swal-dark-title', content: 'swal-dark-content', confirmButton: 'swal-dark-button' }
                        });
                    }
                });
            }
        };

        // Initial load of the default section and attach listeners
        const urlParams = new URLSearchParams(window.location.search);
        const defaultSection = urlParams.get('section') || 'profile';

        const initialLink = document.querySelector(`.sidebar-link[data-section="${defaultSection}"]`);
        if (initialLink) {
            initialLink.click();
        } else {
            // Fallback if the default section link is not found
            document.querySelector('.sidebar-link[data-section="profile"]').click();
        }
    });

    // Function to attach listener to the profile update form
const attachProfileFormListener = () => {
    const profileUpdateForm = document.getElementById('profile-update-form');
    
    // Add event listener for file input to show a preview
    const profilePictureInput = document.getElementById('profile-picture-input');
    const profileImagePreview = document.getElementById('profile-image-preview');
    if(profilePictureInput && profileImagePreview) {
        profilePictureInput.addEventListener('change', (e) => {
            const file = e.target.files[0];
            if (file) {
                const reader = new FileReader();
                reader.onload = (event) => {
                    profileImagePreview.src = event.target.result;
                };
                reader.readAsDataURL(file);
            }
        });
    }

    if (profileUpdateForm) {
        profileUpdateForm.addEventListener('submit', async (event) => {
            event.preventDefault();

            // Use FormData for file uploads
            const formData = new FormData(profileUpdateForm);
            
            try {
                const response = await fetch('/user/profile/update', {
                    method: 'POST',
                    body: formData // Send FormData directly
                });

                const result = await response.json();

                if (response.ok) {
                    Swal.fire({
                        icon: 'success',
                        title: 'Success!',
                        text: result.message || 'Profile updated successfully!',
                        customClass: { popup: 'swal-dark-bg', title: 'swal-dark-title', content: 'swal-dark-content', confirmButton: 'swal-dark-button' }
                    });
                    // Re-load profile section to show fresh data
                    setTimeout(() => {
                        loadSection('profile');
                    }, 1500);
                } else {
                    Swal.fire({
                        icon: 'error',
                        title: 'Oops...',
                        text: result.message || 'Failed to update profile. Please try again.',
                        customClass: { popup: 'swal-dark-bg', title: 'swal-dark-title', content: 'swal-dark-content', confirmButton: 'swal-dark-button' }
                    });
                }
            } catch (error) {
                console.error('Error submitting profile update:', error);
                Swal.fire({
                    icon: 'error',
                    title: 'Network Error!',
                    text: 'Could not connect to server. Please check your internet connection.',
                    customClass: { popup: 'swal-dark-bg', title: 'swal-dark-title', content: 'swal-dark-content', confirmButton: 'swal-dark-button' }
                });
            }
        });
    }
};
</script>

<style>
/* Custom SweetAlert2 styles for dark theme */
.swal-dark-bg {
    background-color: #1a202c !important; /* Tailwind gray-900 */
    color: #e2e8f0 !important; /* Tailwind gray-200 */
    border: 1px solid #4a5568 !important; /* Tailwind gray-600 */
    box-shadow: 0 0 10px rgba(0, 0, 0, 0.5) !important;
}

.swal-dark-title {
    color: #cbd5e0 !important; /* Tailwind gray-300 */
}

.swal-dark-content {
    color: #a0aec0 !important; /* Tailwind gray-400 */
}

.swal-dark-button {
    background-color: #4299e1 !important; /* Tailwind blue-500 */
    color: white !important;
    border: none !important;
}

.swal-dark-button:focus {
    box-shadow: 0 0 0 3px rgba(66, 153, 225, 0.5) !important; /* Blue shadow on focus */
}

/* Ensure font-awesome classes are applied */
.swal2-icon {
    font-family: 'Font Awesome 6 Free', sans-serif !important;
    font-weight: 900 !important; /* Required for solid icons */
}

/* Example: Specific icons can be styled if needed */
.swal2-success .swal2-success-line-tip,
.swal2-success .swal2-success-line-long {
    background-color: #38a169 !important; /* Green for success */
}

.swal2-error .swal2-x-mark-line-left,
.swal2-error .swal2-x-mark-line-right {
    background-color: #e53e3e !important; /* Red for error */
}
</style>